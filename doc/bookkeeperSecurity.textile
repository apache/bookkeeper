Title:        BookKeeper Security
Notice: Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License. You may
        obtain a copy of the License at "http://www.apache.org/licenses/LICENSE-2.0":http://www.apache.org/licenses/LICENSE-2.0.
        .
        .        
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an "AS IS"
        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
        implied. See the License for the specific language governing permissions
        and limitations under the License.
        .
        .

h1. Security in BookKeeper

Apache BookKeeper is a decentralized platform and there are multiple aspects to deal with while securing an BookKeeper Cluster.

Metadata are stored on ZooKeeper, so first of all you will need to secure your ZooKeeper cluster, see "ZooKeeper security":https://zookeeper.apache.org/security.html

Then you have to take care of access to Bookies, you can configure Authentication and encryption using TLS, out of the box BookKeeper supports Kerberos authentication, DIGEST-MD5 authentication and TLS encryption. You can also leverage TLS client authentication in order to protect your data.

h1. ZookKeeper security on BookKeeper

Both clients and Bookies read and write metadata on ZooKeeper, it is also used for Bookie discovery. 
The best way to protect data stored on ZooKeeper is to put ACLs on every z-node, this way only authorized users will be able to access (read/write) data

In order to configure BookKeeper and protect ZooKeeper just simply add a zookeeper.writeAcls=true configuration line.
Beware that your Bookiesss and your clients MUST successfully authenticate to ZooKeeper cluster.
You MUST use the same ZooKeeper principal for every Bookie and every Client, this is usually achived by using Kerberos.


TODO WORK-IN-PROGRESS

